* Initial Setup
** Transparency
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 50))
(add-to-list 'default-frame-alist '(alpha 95 50))
#+END_SRC
** Scroll, tool and menu bar.
#+BEGIN_SRC emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'horizontal-scroll-bar-mode) (horizontal-scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(set-face-attribute 'vertical-border nil :foreground (face-attribute 'fringe :background))
#+END_SRC
** Load packages
#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "http://elpa.gnu.org/packages/")
                         ("melpa"     . "http://melpa.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")))

(package-initialize)
(package-refresh-contents)
#+END_SRC
** Customization Section
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
(load custom-file)
#+END_SRC
** Use packages
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-verbose t)
#+END_SRC
** Backup

   Put all backup files in a separate directory.

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC

   Copy all files, don't rename them.

   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t)
   #+END_SRC

   Make backups for files under version control as well.

   #+BEGIN_SRC emacs-lisp
     (setq vc-make-backup-files nil)
   #+END_SRC

   If t, delete excess backup versions silently.

   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t)
   #+END_SRC

   Number of newest versions to keep when a new numbered backup is made.

   #+BEGIN_SRC emacs-lisp
     (setq kept-new-versions 10)
   #+END_SRC

   Number of oldest versions to keep when a new numbered backup is made.

   #+BEGIN_SRC emacs-lisp
     (setq kept-old-versions 0)
   #+END_SRC

   Make numeric backup versions unconditionally.

   #+BEGIN_SRC emacs-lisp
     (setq version-control t)
   #+END_SRC

** Version Control

   Disable all version control to speed up file saving.

   #+BEGIN_SRC emacs-lisp
     (setq vc-handled-backends nil)
   #+END_SRC

** Message Buffer

   Increase the number of messages in the *Messages* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq message-log-max 10000)
   #+END_SRC
** Misc
   Answer questions with "y" or "n".

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Highlight matching parentheses when the point is on them.

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC

   Enter debugger if an error is signaled?

   #+BEGIN_SRC emacs-lisp
     (setq debug-on-error nil)
   #+END_SRC

   Don't show startup message.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
* Display Setup
** Fonts
#+BEGIN_SRC emacs-lisp
(defun inconsolata ()
  "Set the default font to Inconsolata."
  (interactive)
  (set-default-font "Inconsolata 14"))

#+END_SRC
** appearance
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  )

(load-theme 'zenburn t)
#+END_SRC
* Usability Settings
** Whitespace Mode
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :bind ("C-c T w" . whitespace-mode)
  :init
  (setq whitespace-line-column nil
        whitespace-display-mappings '((space-mark 32 [183] [46])
                                      (newline-mark 10 [9166 10])
                                      (tab-mark 9 [9654 9] [92 9])))
  :config
  (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
  (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
  (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
  :diminish whitespace-mode)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :defer 10
  :diminish which-key-mode
  :config

  ;; Replacements for how KEY is replaced when which-key displays
  ;;   KEY ‚Üí FUNCTION
  ;; Eg: After "C-c", display "right ‚Üí winner-redo" as "‚ñ∂ ‚Üí winner-redo"
  (setq which-key-key-replacement-alist
        '(("<\\([[:alnum:]-]+\\)>" . "\\1")
          ("left"                  . "‚óÄ")
          ("right"                 . "‚ñ∂")
          ("up"                    . "‚ñ≤")
          ("down"                  . "‚ñº")
          ("delete"                . "DEL") ; delete key
          ("\\`DEL\\'"             . "BS") ; backspace key
          ("next"                  . "PgDn")
          ("prior"                 . "PgUp"))

        ;; List of "special" keys for which a KEY is displayed as just
        ;; K but with "inverted video" face... not sure I like this.
        which-key-special-keys '("RET" "DEL" ; delete key
                                 "ESC" "BS" ; backspace key
                                 "SPC" "TAB")

        ;; Replacements for how part or whole of FUNCTION is replaced:
        which-key-description-replacement-alist
        '(("Prefix Command" . "prefix")
          ("\\`calc-"       . "") ; Hide "calc-" prefixes when listing M-x calc keys
          ("\\`projectile-" . "ùìü/")
          ("\\`org-babel-"  . "ob/"))

        ;; Underlines commands to emphasize some functions:
        which-key-highlighted-command-list
        '("\\(rectangle-\\)\\|\\(-rectangle\\)"
          "\\`org-"))

  ;; Change what string to display for a given *complete* key binding
  ;; Eg: After "C-x", display "8 ‚Üí +unicode" instead of "8 ‚Üí +prefix"
  (which-key-add-key-based-replacements
    "C-x 8"   "unicode"
    "C-c T"   "toggles-"
    "C-c p s" "projectile-search"
    "C-c p 4" "projectile-other-buffer-"
    "C-x a"   "abbrev/expand"
    "C-x r"   "rect/reg"
    "C-c /"   "engine-mode-map"
    "C-c C-v" "org-babel")

  (which-key-mode 1))

#+END_SRC
** Undo-Redo
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :init
  (global-undo-tree-mode 1)
  :config
  (defalias 'redo 'undo-tree-redo)
  :bind (("C-z" . undo)     ; Zap to character isn't helpful
         ("C-S-z" . redo)))
#+END_SRC
** Jumping Windows
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
    (global-set-key (kbd "C-x o") 'ace-window)
  :diminish ace-window-mode)
#+END_SRC
** Selecting Buffer with kpm
#+BEGIN_SRC emacs-lisp
(use-package kpm-list
  :ensure t
  :bind ("S-<f8>" . kpm-list)
        ("C-x C-b" . kpm-list))
#+END_SRC
** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-c C-. ."   . mc/mark-all-dwim)
         ("C-c C-. C-." . mc/mark-all-like-this-dwim)
         ("C-c C-. n"   . mc/mark-next-like-this)
         ("C-c C-. C-n" . mc/mark-next-like-this)
         ("C-c C-. p"   . mc/mark-previous-like-this)
         ("C-c C-. C-p" . mc/mark-previous-like-this)
         ("C-c C-. a"   . mc/mark-all-like-this)
         ("C-c C-. C-a" . mc/mark-all-like-this)
         ("C-c C-. N"   . mc/mark-next-symbol-like-this)
         ("C-c C-. C-N" . mc/mark-next-symbol-like-this)
         ("C-c C-. P"   . mc/mark-previous-symbol-like-this)
         ("C-c C-. C-P" . mc/mark-previous-symbol-like-this)
         ("C-c C-. A"   . mc/mark-all-symbols-like-this)
         ("C-c C-. C-A" . mc/mark-all-symbols-like-this)
         ("C-c C-. f"   . mc/mark-all-like-this-in-defun)
         ("C-c C-. C-f" . mc/mark-all-like-this-in-defun)
         ("C-c C-. l"   . mc/edit-lines)
         ("C-c C-. C-l" . mc/edit-lines)
         ("C-c C-. e"   . mc/edit-ends-of-lines)
         ("C-c C-. C-e" . mc/edit-ends-of-lines)
         ("C-M-<mouse-1>" . mc/add-cursor-on-click)))

#+END_SRC
** Block Wrappers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-[") 'insert-pair)
(global-set-key (kbd "M-{") 'insert-pair)
(global-set-key (kbd "M-<") 'insert-pair)
(global-set-key (kbd "M-'") 'insert-pair)
(global-set-key (kbd "M-`") 'insert-pair)
(global-set-key (kbd "M-\"") 'insert-pair)
(use-package wrap-region
  :ensure   t
  :config
  (wrap-region-global-mode t)
  (wrap-region-add-wrappers
   '(("(" ")")
     ("[" "]")
     ("{" "}")
     ("<" ">")
     ("'" "'")
     ("\"" "\"")
     ("‚Äò" "‚Äô"   "q")
     ("‚Äú" "‚Äù"   "Q")
     ("*" "*"   "b"   org-mode)                 ; bolden
     ("*" "*"   "*"   org-mode)                 ; bolden
     ("/" "/"   "i"   org-mode)                 ; italics
     ("/" "/"   "/"   org-mode)                 ; italics
     ("~" "~"   "c"   org-mode)                 ; code
     ("~" "~"   "~"   org-mode)                 ; code
     ("=" "="   "v"   org-mode)                 ; verbatim
     ("=" "="   "="   org-mode)                 ; verbatim
     ("_" "_"   "u" '(org-mode markdown-mode))  ; underline
     ("**" "**" "b"   markdown-mode)            ; bolden
     ("*" "*"   "i"   markdown-mode)            ; italics
     ("`" "`"   "c" '(markdown-mode ruby-mode)) ; code
     ("`" "'"   "c"   lisp-mode)                ; code
     ))
  :diminish wrap-region-mode)
#+END_SRC
** Spaces and Tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default tab-stop-list (number-sequence 2 120 2))
(setq c-basic-indent 2)
(setq sh-basic-offset 2)

(defun my-tabs-makefile-hook ()
  (setq indent-tabs-mode t))
(add-hook 'makefile-mode-hook 'my-tabs-makefile-hook)
#+END_SRC
* Navigation
* Powerline
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
 (require 'powerline)
 (if (display-graphic-p)
     (progn
	(setq powerline-default-separator 'wave)
	(setq powerline-height 25)))
 (setq powerline-default-separator-dir '(right . left))

 ;; first reset the faces that already exist
 (set-face-attribute 'mode-line nil
		      :foreground (face-attribute 'default :foreground)
		      :family "Fira Sans"
		      :weight 'bold
		      :background (face-attribute 'fringe :background))
 (set-face-attribute 'mode-line-inactive nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :background (face-attribute 'fringe :background)
		      :family "Fira Sans"
		      :weight 'bold
		      :box `(:line-width -2 :color ,(face-attribute 'fringe :background)))
 (set-face-attribute 'powerline-active1 nil
		      :background "gray30")
 (set-face-attribute 'powerline-inactive1 nil
		      :background (face-attribute 'default :background)
		      :box `(:line-width -2 :color ,(face-attribute 'fringe :background)))

 ;; these next faces are for the status indicator
 ;; read-only buffer
 (make-face 'mode-line-read-only-face)
 (make-face 'mode-line-read-only-inactive-face)
 (set-face-attribute 'mode-line-read-only-face nil
		      :foreground (face-attribute 'default :foreground)
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-read-only-inactive-face nil
		      :foreground (face-attribute 'default :foreground)
		      :inherit 'mode-line-inactive)

 ;; modified buffer
 (make-face 'mode-line-modified-face)
 (make-face 'mode-line-modified-inactive-face)
 (set-face-attribute 'mode-line-modified-face nil
		      :foreground (face-attribute 'default :background)
		      :background "#e5786d"
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-modified-inactive-face nil
		      :foreground (face-attribute 'default :background)
		      :background "#e5786d"
		      :inherit 'mode-line-inactive)

 ;; unmodified buffer
 (make-face 'mode-line-unmodified-face)
 (make-face 'mode-line-unmodified-inactive-face)
 (set-face-attribute 'mode-line-unmodified-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-unmodified-inactive-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'mode-line-inactive)

 ;; the remote indicator
 (make-face 'mode-line-remote-face)
 (make-face 'mode-line-remote-inactive-face)
 (set-face-attribute 'mode-line-remote-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :background (face-attribute 'default :background)
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-remote-inactive-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :background (face-attribute 'default :background)
		      :inherit 'mode-line-inactive)

 ;; the current file name
 (make-face 'mode-line-filename-face)
 (make-face 'mode-line-filename-inactive-face)
 (set-face-attribute 'mode-line-filename-face nil
		      :foreground (face-attribute 'font-lock-type-face :foreground)
		      :background (face-attribute 'default :background)
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-filename-inactive-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :background (face-attribute 'default :background)
		      :inherit 'mode-line-inactive)

 ;; the major mode name
 (make-face 'mode-line-major-mode-face)
 (make-face 'mode-line-major-mode-inactive-face)
 (set-face-attribute 'mode-line-major-mode-face nil
		      :foreground (face-attribute 'default :foreground)
		      :inherit 'powerline-active1)
 (set-face-attribute 'mode-line-major-mode-inactive-face nil
		      :box `(:line-width -2 :color ,(face-attribute 'fringe :background))
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'powerline-inactive1)

 ;; the minor mode name
 (make-face 'mode-line-minor-mode-face)
 (make-face 'mode-line-minor-mode-inactive-face)
 (set-face-attribute 'mode-line-minor-mode-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'powerline-active1)
 (set-face-attribute 'mode-line-minor-mode-inactive-face nil
		      :box `(:line-width -2 :color ,(face-attribute 'fringe :background))
		      :foreground (face-attribute 'powerline-inactive1 :background)
		      :inherit 'powerline-inactive1)

 ;; the position face
 (make-face 'mode-line-position-face)
 (make-face 'mode-line-position-inactive-face)
 (set-face-attribute 'mode-line-position-face nil
		      :background (face-attribute 'default :background)
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-position-inactive-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :background (face-attribute 'default :background)
		      :inherit 'mode-line-inactive)

 ;; the 80col warning face
 (make-face 'mode-line-80col-face)
 (make-face 'mode-line-80col-inactive-face)
 (set-face-attribute 'mode-line-80col-face nil
		      :background "#e5786d"
		      :foreground (face-attribute 'default :background)
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-80col-inactive-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :background (face-attribute 'default :background)
		      :inherit 'mode-line-inactive)

 ;; the buffer percentage face
 (make-face 'mode-line-percentage-face)
 (make-face 'mode-line-percentage-inactive-face)
 (set-face-attribute 'mode-line-percentage-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'mode-line)
 (set-face-attribute 'mode-line-percentage-inactive-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'mode-line-inactive)

 ;; the directory face
 (make-face 'mode-line-shell-dir-face)
 (make-face 'mode-line-shell-dir-inactive-face)
 (set-face-attribute 'mode-line-shell-dir-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'powerline-active1)
 (set-face-attribute 'mode-line-shell-dir-inactive-face nil
		      :foreground (face-attribute 'font-lock-comment-face :foreground)
		      :inherit 'powerline-inactive1)

 (defun shorten-directory (dir max-length)
   "Show up to `max-length' characters of a directory name `dir'."
   (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
	  (output ""))
     (when (and path (equal "" (car path)))
	(setq path (cdr path)))
     (while (and path (< (length output) (- max-length 4)))
	(setq output (concat (car path) "/" output))
	(setq path (cdr path)))
     (when path
	(setq output (concat ".../" output)))
     output))

 (defpowerline dennis-powerline-narrow
   (let (real-point-min real-point-max)
     (save-excursion
	(save-restriction
	  (widen)
	  (setq real-point-min (point-min) real-point-max (point-max))))
     (when (or (/= real-point-min (point-min))
		(/= real-point-max (point-max)))
	(propertize (concat (char-to-string #x2691) " Narrow")
		    'mouse-face 'mode-line-highlight
		    'help-echo "mouse-1: Remove narrowing from the current buffer"
		    'local-map (make-mode-line-mouse-map
				'mouse-1 'mode-line-widen)))))

 (defpowerline dennis-powerline-vc
   (when (and (buffer-file-name (current-buffer)) vc-mode)
     (if window-system
	  (let ((backend (vc-backend (buffer-file-name (current-buffer)))))
	    (when backend
	      (format "%s %s: %s"
		      (char-to-string #xe0a0)
		      backend
		      (vc-working-revision (buffer-file-name (current-buffer)) backend)))))))

 (setq-default
  mode-line-format
  '("%e"
    (:eval
     (let* ((active (powerline-selected-window-active))

	     ;; toggle faces between active and inactive
	     (mode-line (if active 'mode-line 'mode-line-inactive))
	     (face1 (if active 'powerline-active1 'powerline-inactive1))
	     (face2 (if active 'powerline-active2 'powerline-inactive2))
	     (read-only-face (if active 'mode-line-read-only-face 'mode-line-read-only-inactive-face))
	     (modified-face (if active 'mode-line-modified-face 'mode-line-modified-inactive-face))
	     (unmodified-face (if active 'mode-line-unmodified-face 'mode-line-unmodified-inactive-face))
	     (position-face (if active 'mode-line-position-face 'mode-line-position-inactive-face))
	     (80col-face (if active 'mode-line-80col-face 'mode-line-80col-inactive-face))
	     (major-mode-face (if active 'mode-line-major-mode-face 'mode-line-major-mode-inactive-face))
	     (minor-mode-face (if active 'mode-line-minor-mode-face 'mode-line-minor-mode-inactive-face))
	     (filename-face (if active 'mode-line-filename-face 'mode-line-filename-inactive-face))
	     (percentage-face (if active 'mode-line-percentage-face 'mode-line-percentage-inactive-face))
	     (remote-face (if active 'mode-line-remote-face 'mode-line-remote-inactive-face))
	     (shell-dir-face (if active 'mode-line-shell-dir-face 'mode-line-shell-dir-inactive-face))

	     ;; get the separators
	     (separator-left (intern (format "powerline-%s-%s"
					     (powerline-current-separator)
					     (car powerline-default-separator-dir))))
	     (separator-right (intern (format "powerline-%s-%s"
					      (powerline-current-separator)
					      (cdr powerline-default-separator-dir))))

	     ;; the right side
	     (rhs (list
		   (dennis-powerline-vc minor-mode-face 'r)
		   (funcall separator-right face1 position-face)
		   (powerline-raw " " position-face)
		   (powerline-raw (char-to-string #xe0a1) position-face)
		   (powerline-raw " " position-face)
		   (powerline-raw "%4l" position-face 'r)
		   ;; display a warning if we go above 80 columns
		   (if (>= (current-column) 80)
		       (funcall separator-right position-face 80col-face)
		     (powerline-raw (char-to-string #x2502) position-face))
		   (if (>= (current-column) 80)
		       (powerline-raw "%3c" 80col-face 'l)
		     (powerline-raw "%3c" position-face 'l))
		   (if (>= (current-column) 80)
		       (powerline-raw " " 80col-face)
		     (powerline-raw " " position-face))
		   (if (>= (current-column) 80)
		       (funcall separator-left 80col-face percentage-face)
		     (funcall separator-left position-face percentage-face))
		   (powerline-raw " " percentage-face)
		   (powerline-raw "%6p" percentage-face 'r)))

	     ;; the left side
	     (lhs (list
		   ;; this is the modified status indicator
		   (cond (buffer-read-only
			  (powerline-raw "  " read-only-face))
			 ((buffer-modified-p)
			  ;; do not light up when in an interactive buffer. Set
			  ;; ML-INTERACTIVE? in hooks for interactive buffers.
			  (if (not (bound-and-true-p ml-interactive?))
			      (powerline-raw "  " modified-face)
			    (powerline-raw "  " unmodified-face)))
			 ((not (buffer-modified-p))
			  (powerline-raw "  " unmodified-face)))
		   (cond (buffer-read-only
			  (powerline-raw (concat (char-to-string #xe0a2) " ") read-only-face 'l))
			 ((buffer-modified-p)
			  (if (not (bound-and-true-p ml-interactive?))
			      (powerline-raw (concat (char-to-string #x2621) " ") modified-face 'l)
			    (powerline-raw (concat (char-to-string #x259e) " ") unmodified-face 'l)))
			 ((not (buffer-modified-p))
			  (powerline-raw (concat (char-to-string #x26c1) " ") unmodified-face 'l)))
		   (cond (buffer-read-only
			  (funcall separator-right read-only-face filename-face))
			 ((buffer-modified-p)
			  (if (not (bound-and-true-p ml-interactive?))
			      (funcall separator-right modified-face filename-face)
			    (funcall separator-right unmodified-face filename-face)))
			 ((not (buffer-modified-p))
			  (funcall separator-right unmodified-face filename-face)))
		   ;; remote indicator
		   (when (file-remote-p default-directory)
		     (powerline-raw (concat " " (char-to-string #x211b)) remote-face))
		   ;; filename and mode info
		   (powerline-buffer-id filename-face 'l)
		   (powerline-raw " " filename-face)
		   (funcall separator-left filename-face major-mode-face)
		   ;; do not need mode info when in ansi-term
		   (unless (bound-and-true-p show-dir-in-mode-line?)
		     (powerline-major-mode major-mode-face 'l))
		   (unless (bound-and-true-p show-dir-in-mode-line?)
		     (powerline-process major-mode-face 'l))
		   ;; show a flag if in line mode in terminal
		   (when (and (bound-and-true-p show-dir-in-mode-line?) (term-in-line-mode))
		     (powerline-raw (concat (char-to-string #x2691) " Line") major-mode-face))
		   (powerline-raw " " major-mode-face)
		   ;; little trick to move the directory name to the mode line
		   ;; when inside of emacs set SHOW-DIR-IN-MODE-LINE? to enable
		   (if (bound-and-true-p show-dir-in-mode-line?)
		       (when (not (file-remote-p default-directory))
			 (powerline-raw (shorten-directory default-directory 45)
					shell-dir-face))
		     (powerline-minor-modes minor-mode-face 'l))
		   (unless (bound-and-true-p show-dir-in-mode-line?)
		     (dennis-powerline-narrow major-mode-face 'l)))))

	;; concatenate it all together
	(concat (powerline-render lhs)
		(powerline-fill face1 (powerline-width rhs))
		(powerline-render rhs))))))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    ))

(use-package counsel
  :ensure t
  )

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind(("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
         ("C-r" . swiper)
         ("C-c C-r" . ivy-resume)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (setq enable-recursive-minibuffers t)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (global-set-key (kbd "C-x g") 'magit-status))

  (use-package magithub-cache-file
    :after magit
    :config (magithub-feature-autoinject t))
  (use-package git-gutter-fringe
    :ensure t)

  (dolist (p '((git-gutter:added    . "#0c0")
               (git-gutter:deleted  . "#c00")
               (git-gutter:modified . "#c0c")))
    (set-face-foreground (car p) (cdr p))
    (set-face-background (car p) (cdr p)))
#+END_SRC
* Projectile and Perspective
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init (projectile-global-mode 0)
  :bind (("C-c p s" . projectile-ag)
         ("C-c p g" . projectile-grep)
         ("C-c p R" . projectile-regenerate-tags)))
(use-package winner
  :ensure t
  :init (winner-mode 1))
(use-package perspective
  :ensure t
  :bind ("C-x x x" . persp-switch-last)
  :init (persp-mode +1)

  (use-package persp-projectile
    :ensure t
    :bind ("C-x x P" . projectile-persp-switch-project))

  :config
    (setq persp-interactive-completion-function #'ido-completing-read)
    (persp-turn-off-modestring))
(use-package ag
  :ensure    t
  :commands  ag
  :init      (setq ag-highlight-search t)
  :config    (add-to-list 'ag-arguments "--word-regexp"))
#+END_SRC
* Company
** Company
#+BEGIN_SRC emasc-lisp
(require 'company)
(setq company-tooltip-align-annotations t)
(setq company-selection-wrap-around t)
(setq company-tooltip-flip-when-above t)
(setq company-idle-delay 0.0)
(add-hook 'after-init-hook 'global-company-mode)

(require 'company-dabbrev)
(require 'company-dabbrev-code)
(setq company-dabbrev-code-everywhere t)
(setq company-dabbrev-code-ignore-case nil)
(setq company-dabbrev-ignore-case nil)
(add-to-list 'company-dabbrev-code-modes 'julia-mode)
(add-to-list 'company-dabbrev-code-modes 'matlab-mode)
(add-to-list 'company-dabbrev-code-modes 'matlab-shell-mode)

(define-key company-active-map [tab] 'company-complete-common-or-cycle)
(define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)

(require 'company-auctex)
(require 'company-math)
(require 'company-c-headers)
(add-to-list 'company-c-headers-path-system "/usr/include/c++/7.1.1/")

(defvar my-company-backends nil
  "A list of my company backends")
(setq my-company-backends
      '(company-auctex-labels
        company-auctex-bibs
        (company-auctex-macros company-auctex-symbols company-auctex-environments)
        (company-math-symbols-latex company-math-symbols-unicode)
        company-ispell
        (company-semantic
         company-clang company-c-headers)
        company-bbdb
        company-elisp
        ac-js2-company
        company-nxml
        company-css
        company-eclim
        company-cmake
        company-capf
        (company-dabbrev-code company-gtags company-etags company-keywords)
        company-oddmuse
        company-files
        company-dabbrev
        company-yasnippet))
(setq company-backends my-company-backends)

(defun add-yas-to-company-backends (backend)
  "Add yasnippet suggestions to the `company-mode' backend BACKEND.

  Returns an alist of (BACKEND :with company-yasnippet)."
  (if (or (eq backend 'company-yasnippet)
          (and (listp backend) (member 'company-yasnippet backend)))
      ;; do nothing
      backend
    ;; else append :with company-yasnippet
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))
;; set the backends if wanted---not right now
;; (setq company-backends (mapcar #'add-yas-to-company-backends my-company-backends))

(defun my-elpy-module-company (command &rest args)
  "Prepare company for elpy, without being too intrusive."
  (pcase command
    (`global-init
     (require 'company)
     (elpy-modules-remove-modeline-lighter 'company-mode)
     (define-key company-active-map (kbd "C-d")
       'company-show-doc-buffer))
    (`buffer-init
     (set (make-local-variable 'company-backends)
          ;; to enable yasnippet suggestions, use the following instead:
          ;; (cons '(elpy-company-backend :with company-yasnippet)
          (cons '(elpy-company-backend)
                (mapcar #'identity ;; if want yasnippet, change here
                        (delq 'company-semantic
                              (delq 'company-ropemacs
                                    (delq 'company-capf
                                          my-company-backends))))))
     (company-mode 1))
    (`buffer-stop
     (company-mode -1)
     (kill-local-variable 'company-backends))))

(advice-add 'elpy-module-company :override #'my-elpy-module-company)

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (yas-expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas-minor-mode) ;; xxx change this to point to right var
            (null (when (looking-at "\\_>") (do-yas-expand))))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

(define-key prog-mode-map [tab] 'tab-indent-or-complete)
(define-key prog-mode-map (kbd "TAB") 'tab-indent-or-complete)
#+END_SRC
